<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CannotAddMissingDevYear" xml:space="preserve">
    <value>Cannot add missing development year - parameters are invalid.</value>
  </data>
  <data name="CannotGetProductClaimsForOriginYear" xml:space="preserve">
    <value>Failed to get product claims for origin year - invalid argument values.</value>
  </data>
  <data name="CannotParseCategoryTitlesFromNullOrEmptyData" xml:space="preserve">
    <value>Cannot parse category titles in data parser - input data is null or empty</value>
  </data>
  <data name="CannotParseInputAsParamIsNullOrEmpty" xml:space="preserve">
    <value>Cannot parse input data in data parser - input parameter is null or empty.</value>
  </data>
  <data name="CantAccessRawInputDataFile" xml:space="preserve">
    <value>Can't read raw input data, file isn't valid or user cannot access it.</value>
  </data>
  <data name="CantCreateWriterAsSeparatorIsAlphanumeric" xml:space="preserve">
    <value>Can't create data file writer - item separator is alphanumeric value.</value>
  </data>
  <data name="ClaimsDataFileReadError" xml:space="preserve">
    <value>Error reading input data file.</value>
  </data>
  <data name="CouldNotIdentifyCategoryTitles" xml:space="preserve">
    <value>Cannot identify category titles in input data. Separators may be missing.</value>
  </data>
  <data name="DidNotSaveDataDueToInvalidSource" xml:space="preserve">
    <value>Didn't save cumulative claims data - invalid input source.</value>
  </data>
  <data name="DidntGetProductClaimsForOriginYear" xml:space="preserve">
    <value>Didn't get product claims for origin year, invalid parameter value.</value>
  </data>
  <data name="DidntReadFileInputData" xml:space="preserve">
    <value>Didn't read file input data - input parameter is invalid.</value>
  </data>
  <data name="DidntWriteProductClaimsDataToFile" xml:space="preserve">
    <value>Didn't write product claims data to file - parameters are invalid.</value>
  </data>
  <data name="ErrorReadingClaimsDataFile" xml:space="preserve">
    <value>Error occurred reading from file.</value>
  </data>
  <data name="ErrorSavingCumulativeClaimsData" xml:space="preserve">
    <value>Error in saving cumulative claims data.</value>
  </data>
  <data name="ErrorWritingClaimsDataToFile" xml:space="preserve">
    <value>Error occurred in writing claims data to file.</value>
  </data>
  <data name="ExceededWarningLimit" xml:space="preserve">
    <value>Aborting parse attempt. Exceeded warning limit.</value>
  </data>
  <data name="FailedToAddMissingDevYearsData" xml:space="preserve">
    <value>Failed to add missing development years data - invalid argument values.</value>
  </data>
  <data name="FailedToAddMissingOriginYearsData" xml:space="preserve">
    <value>Failed to add missing origin years data - invalid argument values.</value>
  </data>
  <data name="FailedToAddMissingYearsData" xml:space="preserve">
    <value>Failed to add missing years data - invalid argument values.</value>
  </data>
  <data name="FailedToCreateDataCategoryParser" xml:space="preserve">
    <value>Failed to create data category parser - separator is alphanumeric char</value>
  </data>
  <data name="FailedToCreateProductClaimsData" xml:space="preserve">
    <value>Failed to create product claims data - origin year parameter is invalid.</value>
  </data>
  <data name="FailedToCreateProductClaimsParser" xml:space="preserve">
    <value>Failed to create product claims data parser - invalid null parameter(s).</value>
  </data>
  <data name="GeneralIssueSavingClaimsData" xml:space="preserve">
    <value>Problem occurred in saving claims data.</value>
  </data>
  <data name="IncrementalClaimsDataInvalidParameter" xml:space="preserve">
    <value>Failed to parse incremental claims data - invalid parameter.</value>
  </data>
  <data name="InvalidClaimsDataCategoriesError" xml:space="preserve">
    <value>Didn't identify claims data categories - titles may be missing separators.</value>
  </data>
  <data name="InvalidInputSourceError" xml:space="preserve">
    <value>Error occurred - invalid input source.</value>
  </data>
  <data name="LowerCaseDevelopmentYearTitle" xml:space="preserve">
    <value>development year</value>
  </data>
  <data name="LowerCaseIncrementalValueTitle" xml:space="preserve">
    <value>incremental value</value>
  </data>
  <data name="LowerCaseOriginYearTitle" xml:space="preserve">
    <value>origin year</value>
  </data>
  <data name="LowerCaseProductTitle" xml:space="preserve">
    <value>product</value>
  </data>
  <data name="ParseClaimsInputDataError" xml:space="preserve">
    <value>Error parsing claims input data.</value>
  </data>
  <data name="SaveCumulativeClaimsDataError" xml:space="preserve">
    <value>Error occurred - could not save cumulative claims data.</value>
  </data>
  <data name="SeparatorIsAlphanumericValue" xml:space="preserve">
    <value>Failed to create incremental claims parser - separator is alphanumeric value.</value>
  </data>
  <data name="UpdatedClaimsOutputFile" xml:space="preserve">
    <value>Updated cumulative claims data output file</value>
  </data>
  <data name="WriteProductsClaimsDataError" xml:space="preserve">
    <value>Failed to write products claims data.</value>
  </data>
</root>